# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IndicesDialog
                                 A QGIS plugin
 NDVI (Normalized Difference Vegetation Index) is a widely used vegetation index that quantifies vegetation health and density based on the difference in reflectance between near-infrared (NIR) and red light bands of satellite or aerial imagery. Here's some information about an NDVI tool plugin:

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-03-10
        git sha              : $Format:%H$
        copyright            : (C) 2024 by J Tech
        email                : hj03110527984@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Indice_calculater_dialog_base.ui'))


class IndicesDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(IndicesDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.ndvi_calc.clicked.connect(self.calculate_ndvi)

    def calculate_ndvi(self):
        nir_path = self.mQgsFileWidget.filePath()
        red_path = self.mQgsFileWidget_5.filePath()

        # Perform NDVI calculation using the file paths
        if nir_path and red_path:  # Ensure both file paths are valid
            # Assuming you have a function to read image data and calculate NDVI
            nir_data = read_image_data(nir_path)
            red_data = read_image_data(red_path)

            if nir_data is not None and red_data is not None:
                ndvi = (nir_data - red_data) / (nir_data + red_data)
                # Display the calculated NDVI in some output widget
                # For example:
                self.ndvi_result_label.setText(str(ndvi))
            else:
                # Handle error reading image data
                self.ndvi_result_label.setText("Error reading image data.")
        else:
            # Handle invalid file paths
            self.ndvi_result_label.setText("Please select valid image files.")


if __name__ == '__main__':
    pass
